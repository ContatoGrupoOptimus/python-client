# coding: utf-8

"""
    Chat API SDK

    The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sale@chat-api.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InstanceStatusStatusDataActions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'expiry': 'InstanceStatusAction',
        'retry': 'InstanceStatusAction',
        'logout': 'InstanceStatusAction',
        'takeover': 'InstanceStatusAction',
        'learn_more': 'InstanceStatusLink'
    }

    attribute_map = {
        'expiry': 'expiry',
        'retry': 'retry',
        'logout': 'logout',
        'takeover': 'takeover',
        'learn_more': 'learn_more'
    }

    def __init__(self, expiry=None, retry=None, logout=None, takeover=None, learn_more=None):  # noqa: E501
        """InstanceStatusStatusDataActions - a model defined in OpenAPI"""  # noqa: E501

        self._expiry = None
        self._retry = None
        self._logout = None
        self._takeover = None
        self._learn_more = None
        self.discriminator = None

        if expiry is not None:
            self.expiry = expiry
        if retry is not None:
            self.retry = retry
        if logout is not None:
            self.logout = logout
        if takeover is not None:
            self.takeover = takeover
        if learn_more is not None:
            self.learn_more = learn_more

    @property
    def expiry(self):
        """Gets the expiry of this InstanceStatusStatusDataActions.  # noqa: E501


        :return: The expiry of this InstanceStatusStatusDataActions.  # noqa: E501
        :rtype: InstanceStatusAction
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this InstanceStatusStatusDataActions.


        :param expiry: The expiry of this InstanceStatusStatusDataActions.  # noqa: E501
        :type: InstanceStatusAction
        """

        self._expiry = expiry

    @property
    def retry(self):
        """Gets the retry of this InstanceStatusStatusDataActions.  # noqa: E501


        :return: The retry of this InstanceStatusStatusDataActions.  # noqa: E501
        :rtype: InstanceStatusAction
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """Sets the retry of this InstanceStatusStatusDataActions.


        :param retry: The retry of this InstanceStatusStatusDataActions.  # noqa: E501
        :type: InstanceStatusAction
        """

        self._retry = retry

    @property
    def logout(self):
        """Gets the logout of this InstanceStatusStatusDataActions.  # noqa: E501


        :return: The logout of this InstanceStatusStatusDataActions.  # noqa: E501
        :rtype: InstanceStatusAction
        """
        return self._logout

    @logout.setter
    def logout(self, logout):
        """Sets the logout of this InstanceStatusStatusDataActions.


        :param logout: The logout of this InstanceStatusStatusDataActions.  # noqa: E501
        :type: InstanceStatusAction
        """

        self._logout = logout

    @property
    def takeover(self):
        """Gets the takeover of this InstanceStatusStatusDataActions.  # noqa: E501


        :return: The takeover of this InstanceStatusStatusDataActions.  # noqa: E501
        :rtype: InstanceStatusAction
        """
        return self._takeover

    @takeover.setter
    def takeover(self, takeover):
        """Sets the takeover of this InstanceStatusStatusDataActions.


        :param takeover: The takeover of this InstanceStatusStatusDataActions.  # noqa: E501
        :type: InstanceStatusAction
        """

        self._takeover = takeover

    @property
    def learn_more(self):
        """Gets the learn_more of this InstanceStatusStatusDataActions.  # noqa: E501


        :return: The learn_more of this InstanceStatusStatusDataActions.  # noqa: E501
        :rtype: InstanceStatusLink
        """
        return self._learn_more

    @learn_more.setter
    def learn_more(self, learn_more):
        """Sets the learn_more of this InstanceStatusStatusDataActions.


        :param learn_more: The learn_more of this InstanceStatusStatusDataActions.  # noqa: E501
        :type: InstanceStatusLink
        """

        self._learn_more = learn_more

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceStatusStatusDataActions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
