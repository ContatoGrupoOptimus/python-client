# coding: utf-8

"""
    Chat API SDK

    The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sale@chat-api.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BanTestStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'banned': 'bool',
        'message': 'str',
        'phone': 'str',
        'ban_phone_mask': 'str'
    }

    attribute_map = {
        'banned': 'banned',
        'message': 'message',
        'phone': 'phone',
        'ban_phone_mask': 'banPhoneMask'
    }

    def __init__(self, banned=None, message=None, phone=None, ban_phone_mask=None):  # noqa: E501
        """BanTestStatus - a model defined in OpenAPI"""  # noqa: E501

        self._banned = None
        self._message = None
        self._phone = None
        self._ban_phone_mask = None
        self.discriminator = None

        if banned is not None:
            self.banned = banned
        if message is not None:
            self.message = message
        if phone is not None:
            self.phone = phone
        if ban_phone_mask is not None:
            self.ban_phone_mask = ban_phone_mask

    @property
    def banned(self):
        """Gets the banned of this BanTestStatus.  # noqa: E501


        :return: The banned of this BanTestStatus.  # noqa: E501
        :rtype: bool
        """
        return self._banned

    @banned.setter
    def banned(self, banned):
        """Sets the banned of this BanTestStatus.


        :param banned: The banned of this BanTestStatus.  # noqa: E501
        :type: bool
        """

        self._banned = banned

    @property
    def message(self):
        """Gets the message of this BanTestStatus.  # noqa: E501


        :return: The message of this BanTestStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BanTestStatus.


        :param message: The message of this BanTestStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def phone(self):
        """Gets the phone of this BanTestStatus.  # noqa: E501

        Test phone number  # noqa: E501

        :return: The phone of this BanTestStatus.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this BanTestStatus.

        Test phone number  # noqa: E501

        :param phone: The phone of this BanTestStatus.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def ban_phone_mask(self):
        """Gets the ban_phone_mask of this BanTestStatus.  # noqa: E501

        Test regex  # noqa: E501

        :return: The ban_phone_mask of this BanTestStatus.  # noqa: E501
        :rtype: str
        """
        return self._ban_phone_mask

    @ban_phone_mask.setter
    def ban_phone_mask(self, ban_phone_mask):
        """Sets the ban_phone_mask of this BanTestStatus.

        Test regex  # noqa: E501

        :param ban_phone_mask: The ban_phone_mask of this BanTestStatus.  # noqa: E501
        :type: str
        """

        self._ban_phone_mask = ban_phone_mask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BanTestStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
