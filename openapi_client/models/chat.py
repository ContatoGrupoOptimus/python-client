# coding: utf-8

"""
    Chat API SDK

    The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sale@chat-api.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Chat(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'image': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'image': 'image',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, name=None, image=None, metadata=None):  # noqa: E501
        """Chat - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._image = None
        self._metadata = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if image is not None:
            self.image = image
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this Chat.  # noqa: E501

        chat id  # noqa: E501

        :return: The id of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Chat.

        chat id  # noqa: E501

        :param id: The id of this Chat.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Chat.  # noqa: E501

        chat name  # noqa: E501

        :return: The name of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Chat.

        chat name  # noqa: E501

        :param name: The name of this Chat.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def image(self):
        """Gets the image of this Chat.  # noqa: E501

        HTTPS link on avatar or group image  # noqa: E501

        :return: The image of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Chat.

        HTTPS link on avatar or group image  # noqa: E501

        :param image: The image of this Chat.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def metadata(self):
        """Gets the metadata of this Chat.  # noqa: E501

        Additional info about chat  # noqa: E501

        :return: The metadata of this Chat.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Chat.

        Additional info about chat  # noqa: E501

        :param metadata: The metadata of this Chat.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Chat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
