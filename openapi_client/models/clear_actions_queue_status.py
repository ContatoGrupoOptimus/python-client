# coding: utf-8

"""
    Chat API SDK

    The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sale@chat-api.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClearActionsQueueStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'message': 'str',
        'actions_example': 'list[str]'
    }

    attribute_map = {
        'message': 'message',
        'actions_example': 'actionsExample'
    }

    def __init__(self, message=None, actions_example=None):  # noqa: E501
        """ClearActionsQueueStatus - a model defined in OpenAPI"""  # noqa: E501

        self._message = None
        self._actions_example = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if actions_example is not None:
            self.actions_example = actions_example

    @property
    def message(self):
        """Gets the message of this ClearActionsQueueStatus.  # noqa: E501

        Actions queue clear status  # noqa: E501

        :return: The message of this ClearActionsQueueStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ClearActionsQueueStatus.

        Actions queue clear status  # noqa: E501

        :param message: The message of this ClearActionsQueueStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def actions_example(self):
        """Gets the actions_example of this ClearActionsQueueStatus.  # noqa: E501

        Type of the first hundred actions from the cleaned queue  # noqa: E501

        :return: The actions_example of this ClearActionsQueueStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions_example

    @actions_example.setter
    def actions_example(self, actions_example):
        """Sets the actions_example of this ClearActionsQueueStatus.

        Type of the first hundred actions from the cleaned queue  # noqa: E501

        :param actions_example: The actions_example of this ClearActionsQueueStatus.  # noqa: E501
        :type: list[str]
        """

        self._actions_example = actions_example

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClearActionsQueueStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
