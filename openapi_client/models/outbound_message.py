# coding: utf-8

"""
    Chat API SDK

    The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sale@chat-api.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OutboundMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'body': 'str',
        'type': 'str',
        'last_try': 'int',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'body': 'body',
        'type': 'type',
        'last_try': 'last_try',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, body=None, type=None, last_try=None, metadata=None):  # noqa: E501
        """OutboundMessage - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._body = None
        self._type = None
        self._last_try = None
        self._metadata = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if body is not None:
            self.body = body
        if type is not None:
            self.type = type
        if last_try is not None:
            self.last_try = last_try
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this OutboundMessage.  # noqa: E501

        message id in queue  # noqa: E501

        :return: The id of this OutboundMessage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OutboundMessage.

        message id in queue  # noqa: E501

        :param id: The id of this OutboundMessage.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def body(self):
        """Gets the body of this OutboundMessage.  # noqa: E501

        text message in queue  # noqa: E501

        :return: The body of this OutboundMessage.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this OutboundMessage.

        text message in queue  # noqa: E501

        :param body: The body of this OutboundMessage.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def type(self):
        """Gets the type of this OutboundMessage.  # noqa: E501

        type of the message in queue  # noqa: E501

        :return: The type of this OutboundMessage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OutboundMessage.

        type of the message in queue  # noqa: E501

        :param type: The type of this OutboundMessage.  # noqa: E501
        :type: str
        """
        allowed_values = ["chat", "image", "ptt", "document", "audio", "video", "location", "call_log"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def last_try(self):
        """Gets the last_try of this OutboundMessage.  # noqa: E501

        Last try time to send a message  # noqa: E501

        :return: The last_try of this OutboundMessage.  # noqa: E501
        :rtype: int
        """
        return self._last_try

    @last_try.setter
    def last_try(self, last_try):
        """Sets the last_try of this OutboundMessage.

        Last try time to send a message  # noqa: E501

        :param last_try: The last_try of this OutboundMessage.  # noqa: E501
        :type: int
        """

        self._last_try = last_try

    @property
    def metadata(self):
        """Gets the metadata of this OutboundMessage.  # noqa: E501

        Additional message data  # noqa: E501

        :return: The metadata of this OutboundMessage.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OutboundMessage.

        Additional message data  # noqa: E501

        :param metadata: The metadata of this OutboundMessage.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutboundMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
