# coding: utf-8

"""
    Chat API SDK

    The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sale@chat-api.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WebhookStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'msg_id': 'str',
        'time': 'str',
        'status': 'str'
    }

    attribute_map = {
        'msg_id': 'msgId',
        'time': 'time',
        'status': 'status'
    }

    def __init__(self, msg_id=None, time=None, status=None):  # noqa: E501
        """WebhookStatus - a model defined in OpenAPI"""  # noqa: E501

        self._msg_id = None
        self._time = None
        self._status = None
        self.discriminator = None

        if msg_id is not None:
            self.msg_id = msg_id
        if time is not None:
            self.time = time
        if status is not None:
            self.status = status

    @property
    def msg_id(self):
        """Gets the msg_id of this WebhookStatus.  # noqa: E501

        message id  # noqa: E501

        :return: The msg_id of this WebhookStatus.  # noqa: E501
        :rtype: str
        """
        return self._msg_id

    @msg_id.setter
    def msg_id(self, msg_id):
        """Sets the msg_id of this WebhookStatus.

        message id  # noqa: E501

        :param msg_id: The msg_id of this WebhookStatus.  # noqa: E501
        :type: str
        """

        self._msg_id = msg_id

    @property
    def time(self):
        """Gets the time of this WebhookStatus.  # noqa: E501

        creation date  # noqa: E501

        :return: The time of this WebhookStatus.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this WebhookStatus.

        creation date  # noqa: E501

        :param time: The time of this WebhookStatus.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def status(self):
        """Gets the status of this WebhookStatus.  # noqa: E501

        status name (\"sent\", \"not sent\", \"queued\")  # noqa: E501

        :return: The status of this WebhookStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WebhookStatus.

        status name (\"sent\", \"not sent\", \"queued\")  # noqa: E501

        :param status: The status of this WebhookStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
